#-------------------------------------
#-------------------------------------
#------- NER Streamlit App -----------
#------- Portfolio Update 3 ----------
#------- Written by Beau Yates -------
#-------------------------------------
#-------------------------------------

# Import spaCy and Streamlit libraries
import spacy
import streamlit as st

from spacy import displacy

# Load spaCy's natural language processing library
nlp = spacy.load('en_core_web_sm')

#----------------------------------------
# Part 1: Initializing the Streamlit App
#----------------------------------------

# Formatting the Streamlit app:
# Create a header/title
st.title("Named Entity Recognition App")

st.divider()
# Introduce how the app works/how users can interact with the interface
st.text("This Streamlit App allows users to input their own text for Named Entity Recognition (NER). \
        Users will be able to add their own labels and patterns to the text to customize the NER \
        and make pattern labels as accurate or specific as the text requires.")
st.divider()



#---------------------------
# Part 2: Text input/upload
#---------------------------

# Create header for the text input section of app
st.subheader("Input or Upload Text")

# Create button selection so user can choose to manually input text or upload a .txt file
text = st.radio("Choose method:", ("Input text", "Upload text (.txt file)"))

# If statement to give the button a working function
if text == "Input text":
    user_text = st.text_area("Enter your text below:")
else:
    uploaded_file = st.file_uploader("Upload a text file below:", type=["txt"])
    # The following line of code was generated using ChatGPT
    user_text = uploaded_file.read().decode("utf-8")

st.divider()



#----------------------------------------
# Part 3: Add custom labels and patterns
#----------------------------------------

# Create header for the labels and patterns section of app
st.subheader("Add Custom Labels and Patterns")

# Initialize list for the variable 'patterns'. This will store every label and pattern the user inputs.
patterns = []

# Add a number input section for the user to set the number of custom labels and patterns they wish to use.
# This will have a minimum value of 0 (no negative numbers allowed) and will be set to 1 when the app is initially loaded.
# That number will be stored in the variable 'num_patterns.
num_patterns = st.number_input("How many custom patterns do you want to add?", value=1, min_value = 0)

# For loop to create new text input boxes for the correct number of patterns set by the user.
for i in range(num_patterns):
    st.divider()
    # Create header for each pattern
    st.markdown(f"Pattern {i+1}")
    # In the below code, the "key = f"Label_{i}" and key = f"pattern_{i}"" were generated using ChatGPT
    # User inputs label
    label_input = st.text_input("Label (e.g., Wizard):", key = f"label_{i}")
    # User inputs pattern
    pattern_input = st.text_input("Pattern (e.g., Gandalf):", key = f"pattern_{i}")

    # The following 2 lines of code were generated by ChatGPT
    if label_input and pattern_input:
        patterns.append({"label": label_input, "pattern": pattern_input})

st.divider()



#---------------------------------------------------
# Part 4: Have the spaCy EntityRuler label the text
#---------------------------------------------------

# If statement: will activate once the 'Process Text button is pressed by a user
if st.button("Process Text"):
    # Set up a new pipeline with EntityRuler
    ruler = nlp.add_pipe("entity_ruler", before="ner")
    ruler.add_patterns(patterns)

    # Create variable 'doc' to process the user inputted/uploaded text
    doc = nlp(user_text)

    # Create subheader for the processed text section of app
    st.subheader("Processed Text:")

    # Display visualization of the processed text
    rendered = displacy.render(doc, style="ent", jupyter=False)
    st.write(f"{rendered}</div>", unsafe_allow_html=True)

    st.divider()

    # Print all detected entities in Streamlit
    # Create subheader for detected entities and labels section of app
    st.subheader("Detected Entities and Labels:")

    # for loop to print all detected words and corresponding labels
    for ent in doc.ents:
        st.markdown(f"{ent.text} : {ent.label_}")